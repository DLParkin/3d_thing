/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: tyurru02 (https://sketchfab.com/tyurru02)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/seeu-miniature-5f7371056ba148e0a7936014a9b05030
Title: SeeU Miniature
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import girlScene from "../components/assets/3d/girl2.glb";

const Girl2 = ({ isRotating, setIsRotating, ...props }) => {
  const girlRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(girlScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handleResize = () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    gl.setSize(window.innerWidth, window.innerHeight);
  };

  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  const handleMouseUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handleMouseMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
      const piScaledDelta = delta * 0.01 * Math.PI;
      girlRef.current.rotation.y += piScaledDelta;

      lastX.current = clientX;
      rotationSpeed.current = piScaledDelta;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      girlRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      girlRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.0005) {
        rotationSpeed.current = 0;
      }

      girlRef.current.rotation.y += rotationSpeed.current;
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handleMouseDown);
    canvas.addEventListener("pointerup", handleMouseUp);
    canvas.addEventListener("pointermove", handleMouseMove);

    canvas.addEventListener("touchstart", handleMouseDown);
    canvas.addEventListener("touchend", handleMouseUp);
    canvas.addEventListener("touchmove", handleMouseMove);

    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    window.addEventListener("resize", handleResize);

    return () => {
      canvas.removeEventListener("pointerdown", handleMouseDown);
      canvas.removeEventListener("pointerup", handleMouseUp);
      canvas.removeEventListener("pointermove", handleMouseMove);

      canvas.removeEventListener("touchstart", handleMouseDown);
      canvas.removeEventListener("touchend", handleMouseUp);
      canvas.removeEventListener("touchmove", handleMouseMove);

      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);

      window.removeEventListener("resize", handleResize);
    };
  }, [gl, handleMouseUp, handleMouseMove, handleMouseDown, handleResize]);

  return (
    <a.group {...props} ref={girlRef}>
      <group position={[0, -14650, -3500]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material10.geometry}
          material={materials.mat_00_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material9.geometry}
          material={materials.mat_02_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2.geometry}
          material={materials.mat_04_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material1.geometry}
          material={materials.mat_05_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material8.geometry}
          material={materials.mat_06_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material7.geometry}
          material={materials.mat_07_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material6.geometry}
          material={materials.mat_08_0}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material5.geometry}
          material={materials.mat_09}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material4.geometry}
          material={materials.mat_10}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material3.geometry}
          material={materials.mat_11}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material8_1.geometry}
        material={materials.mat_00}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material7_1.geometry}
        material={materials.mat_01}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material6_1.geometry}
        material={materials.mat_02}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material5_1.geometry}
        material={materials.mat_04}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material4_1.geometry}
        material={materials.mat_05}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material3_1.geometry}
        material={materials.mat_06}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material2_1.geometry}
        material={materials.mat_07}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material1_1.geometry}
        material={materials.mat_08}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material11.geometry}
        material={materials.mat_09}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material10_1.geometry}
        material={materials.mat_10}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Material9_1.geometry}
        material={materials.mat_11}
      />
    </a.group>
  );
};

export default Girl2;
