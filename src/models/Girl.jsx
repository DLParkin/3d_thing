/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: graylancer (https://sketchfab.com/graylancer)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/pika-girl-1d8a1e38b7c14aebba98d02fd25c5a6a
Title: Pika_Girl
*/
import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import girlScene from "../components/assets/3d/girl.glb";

const Girl = ({ isRotating, setIsRotating, ...props }) => {
  const girlRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(girlScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  const handleMouseUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handleMouseMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
      const piScaledDelta = delta * 0.01 * Math.PI;
      girlRef.current.rotation.y += piScaledDelta;

      lastX.current = clientX;
      rotationSpeed.current = piScaledDelta;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      girlRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      girlRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.0005) {
        rotationSpeed.current = 0;
      }

      girlRef.current.rotation.y += rotationSpeed.current;
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handleMouseDown);
    canvas.addEventListener("pointerup", handleMouseUp);
    canvas.addEventListener("pointermove", handleMouseMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handleMouseDown);
      canvas.removeEventListener("pointerup", handleMouseUp);
      canvas.removeEventListener("pointermove", handleMouseMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handleMouseUp, handleMouseMove, handleMouseDown]);

  return (
    <a.group {...props} ref={girlRef}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Object_4.geometry} material={materials.Grass} />
        <mesh geometry={nodes.Object_5.geometry} material={materials.Pika} />
        <mesh geometry={nodes.Object_6.geometry} material={materials.Ground} />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials.pikagirl}
        />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.pikagirl}
        />
      </group>
    </a.group>
  );
};

export default Girl;
